%%
headers
#include <oscats.h>
#include "gen_oscats.h"
#define ginitiallyunowned_ce gobject_ce
%%
ignore-glob
    *_get_type
%%
ignore oscats_model_new
%%
override oscats_algorithm_register

static PHP_METHOD(OscatsAlgorithm, register)
{
        zval *test;
        OscatsAlgorithm* php_retval;

    NOT_STATIC_METHOD();

        if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "O", &test, oscatstest_ce))
                return;

    /*
     * The PHP-GTK system won't sink arbitrary floating references for us.
     * So, we have to add an extra ref for the wrapper here.
     * Reference problems might happen if a system doesn't have PHP both
     * create and register an algorithm...
     */
    g_object_ref(OSCATS_ALGORITHM(PHPG_GOBJECT(this_ptr)));
    php_retval = oscats_algorithm_register(OSCATS_ALGORITHM(PHPG_GOBJECT(this_ptr)), OSCATS_TEST(PHPG_GOBJECT(test)));
    phpg_gobject_new(&return_value, (GObject *)php_retval TSRMLS_CC);
}

%%
override oscats_administrand_set_model

static PHP_METHOD(OscatsAdministrand, set_model)
{
	long name;
	zval *model;

    NOT_STATIC_METHOD();

	if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "iO", &name, &model, oscatsmodel_ce))
		return;

    g_object_ref(PHPG_GOBJECT(model));
    oscats_administrand_set_model(OSCATS_ADMINISTRAND(PHPG_GOBJECT(this_ptr)), (GQuark)name, OSCATS_MODEL(PHPG_GOBJECT(model)));

}

%%
override oscats_examinee_set_sim_theta

static PHP_METHOD(OscatsExaminee, set_sim_theta)
{
	zval *theta;

    NOT_STATIC_METHOD();

	if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "O", &theta, oscatspoint_ce))
		return;

    g_object_ref(PHPG_GOBJECT(theta));
    oscats_examinee_set_sim_theta(OSCATS_EXAMINEE(PHPG_GOBJECT(this_ptr)), OSCATS_POINT(PHPG_GOBJECT(theta)));

}

%%
override oscats_examinee_set_est_theta

static PHP_METHOD(OscatsExaminee, set_est_theta)
{
	zval *theta;

    NOT_STATIC_METHOD();

	if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "O", &theta, oscatspoint_ce))
		return;

    g_object_ref(PHPG_GOBJECT(theta));
    oscats_examinee_set_est_theta(OSCATS_EXAMINEE(PHPG_GOBJECT(this_ptr)), OSCATS_POINT(PHPG_GOBJECT(theta)));

}

%%
override oscats_examinee_set_theta

static PHP_METHOD(OscatsExaminee, set_theta)
{
	long name;
	zval *theta;

    NOT_STATIC_METHOD();

	if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "iO", &name, &theta, oscatspoint_ce))
		return;

    g_object_ref(PHPG_GOBJECT(theta));
    oscats_examinee_set_theta(OSCATS_EXAMINEE(PHPG_GOBJECT(this_ptr)), (GQuark)name, OSCATS_POINT(PHPG_GOBJECT(theta)));

}

%%
override oscats_item_new

static PHP_METHOD(OscatsItem, __construct)
{
	long name;
	zval *model;
	GObject *wrapped_obj;

	if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "iO", &name, &model, oscatsmodel_ce)) {
        PHPG_THROW_CONSTRUCT_EXCEPTION(OscatsItem);
	}

	g_object_ref(PHPG_GOBJECT(model));
	wrapped_obj = (GObject *) oscats_item_new((GQuark)name, OSCATS_MODEL(PHPG_GOBJECT(model)));

	if (!wrapped_obj) {
        PHPG_THROW_CONSTRUCT_EXCEPTION(OscatsItem);
	}

    phpg_gobject_set_wrapper(this_ptr, wrapped_obj TSRMLS_CC);
}

%%
